---
- version: unreleased
  summary: 
  date: 
  fixed:
  - 'Negated predicates support the logic operator API now (fixed via #276) (@solnic)'
  added: 
  changed: 
- version: 1.5.0
  summary: 
  date: '2020-03-11'
  fixed:
  - |-
    `maybe` macro in JSON schemas no longer converts empty strings to `nil`.
    This was a bug in dry-types but your code may rely on this behavior. If you still
    require this behavior, we recommend using a custom type (see Advanced -> Custom types in the docs) (@flash-gordon)
  - YAML message backend no longer crashes when load_paths are empty (@robhanlon22)
  - Callbacks can now be inherited from multiple parents (@skryukov)
  - 'Callbacks work with nested schemas (issue #209) (@solnic)'
  - 'Custom type is respected when defining nested schemas (issue #174 closed via
    263) (@solnic)'
  - 'Key map is properly inferred for maybe-hashes (issue #266 fixed via #269) (@solnic)'
  added:
  - 'Support for complex sum types ie `value([:integer, array[:integer])` (issue #214)
    (@solnic)'
  - 'You can now set global config via `Dry::Schema.config` (issue #205) (@robhanlon22)'
  - 'Default error message for `:uuid_v4?` predicate (isssue #230) (@solnic)'
  - "[experimental] you can compose schemas in the DSL using the standard logic operators
    (issue #231 closed via #245) (@solnic)"
  - |-
    Hash schema type can now be used with proper keys and predicates inferring. Constructor
    and default types are explicitly not supported (@flash-gordon)
      ```ruby
      UserType = Dry::Types['hash'].schema(
        name: 'string',
        email: 'string'
      )

      Dry::Schema.define do
        require(:user).hash(UserType)
      end
      ```
  - "`:struct` extension which allows using dry-struct classes as source for hash
    schemas. Note that output will still be presented as plain hashes, returning structs
    from schemas will require more work, it's planned for next versions (@flash-gordon)"
  - "`:info` extension which adds #info method to your schemas which produces a simple
    hash providing information about keys and types (issue #36 closed via #262) (@solnic)"
  changed:
  - "`:i18n` message backend delegates interpolation and caching to `I18n` (issue
    #211) (@robhanlon22)"
  - Raise ArgumentError in DSL if parent DSL configs differ (@robhanlon22)
  - "(internal) `PredicateInferrer` was removed. `Dry::Types::PredicateInferrer` is
    a drop-in replacement (@flash-gordon)"
- version: 1.4.3
  date: '2020-01-08'
  added:
  - |-
    Pattern matching for `Dry::Schema::Result` objects (@flash-gordon)
      ```ruby
      schema = Dry::Schema::Params { required(:name).filled }
      case schema.('name' => 'John')
      in name:
        name # => 'John'
      end
      ```
      Try it with monads!
  - |-
    Shortcut for nested schemas in `value` and `maybe` macros (@waiting-for-dev)
      ```ruby
      Dry::Schema.Params do
        required(:address).value(:hash) do
          required(:city).filled
        end
      end
      ```
  fixed:
  - Some keyword warnings that slipped into the previous release (@flash-gordon)
- version: 1.4.2
  date: '2019-12-19'
  fixed:
  - "`I18n` messages backend supports procs as text properly (issue #208) (@robhanlon22)"
  - "`I18n` messages backend supports message meta-data (issue #210) (@robhanlon22)"
  - Fixed keyword warnings from MRI 2.7.0 (@flash-gordon)
  - 'Array with a member works correctly with `maybe` (issue #206) (@solnic)'
- version: 1.4.1
  date: '2019-10-08'
  fixed:
  - Child schemas no longer mutate processing steps of their parent classes (@skryukov)
- version: 1.4.0
  date: '2019-10-08'
  added:
  - |-
    Support for passing multiple parent schemas. They are inherited from left to right (@ianwhite)

      ```ruby
      Dry::Schema.define(parent: [parent_a, parent_b, parent_c]) do
        ...
      end
      ```
  - Improved error messages about missing translations (@skryukov)
  - |-
    [experimental] before/after callbacks for schema steps (@skryukov)

      ```ruby
      Dry::Schema.Params do
        required(:name).value(:string)
        optional(:age).value(:integer)

        before(:value_coercer) do |result|
          result.to_h.compact
        end
      end
      ```
  fixed:
  - Added/fixed support for custom optional types (@flash-gordon)
- version: 1.3.4
  date: '2019-09-11'
  fixed:
  - 'Fixed regression where using `array?` predicate within a block would crach (issue
    #186) (@skryukov)'
- version: 1.3.3
  date: '2019-08-14'
  fixed:
  - 'Reject attempts to build a nested schema for array types built on `Dry::Types::Nominal`
    (fixed #171) (@flash-gordon)'
  - Current `I18n.locale` is now properly handled when caching message templates (@flash-gordon)
  - Default processor uses strict types by default, which fixes various cases when
    `maybe` is used with a constructor type (@flash-gordon)
  - 'Namespaced messages no longer causes a crash when used with nested schemas (fixed
    #176) (@solnic)'
- version: 1.3.2
  date: '2019-08-01'
  added:
  - 'Support for new predicates: `bytesize?`, `min_bytesize?` and `max_bytesize?`
    (@bmalinconico)'
- version: 1.3.1
  date: '2019-07-08'
  fixed:
  - "`Result#error?` works correctly with nested hashes and arrays (@solnic)"
  - "`:hints` extension no longer causes a crash where base messages are generated
    too (issue #165) (@solnic)"
- version: 1.3.0
  date: '2019-07-06'
  added:
  - |-
    Automatic predicate inferring for constrained types! (@flash-gordon)

      ```ruby
      Types::Name = Types::String.constrained(min_size: 1)

      schema = Dry::Schema.define do
        required(:name).value(Types::Name)
      end

      schema.(name: '').errors.to_h # => { name: ["size cannot be less than 1"] }
      ```
  - 'Support for redefining re-used schemas (issue #43) (@skryukov)'
  fixed:
  - Type container is passed down to nested schemas (@flash-gordon)
- version: 1.2.0
  date: '2019-06-13'
  added:
  - |-
    Ability to configure your own type container (@Morozzzko)

      ```ruby
      types = Dry::Schema::TypeContainer.new
      types.register(
        'params.trimmed_string',
        Types::String.constructor(&:strip).constructor(&:downcase)
      )

      Dry::Schema.Params do
        config.types = types

        require(:name).value(:trimmed_string)
      end
      ```
  fixed:
  - "`filled` macro no longer generates incorrect messages for arrays (issue #151)
    (@solnic)"
  - "`filled` macro works correctly with constructor types (@solnic)"
  - "`filled` works correctly with nested schemas (#149) (@solnic + @timriley)"
  - Custom array constructors are no longer discredited by `array` macro (@solnic)
  - "`BigDecimal` type is correctly handled by predicate inference (@solnic)"
  - Works with latest `dry-logic` which provides the new `respond_to?` predicate (#153)
    (@flash-gordon)
  changed:
  - Fixes related to `filled` restored pre-1.1.0 behavior of `:hints` which are again
    included (@solnic)
  - "`filled` no longer uses filter rules to handle empty strings in `Params` (@solnic)"
- version: 1.1.0
  date: '2019-05-30'
  added:
  - "`config.messages.default_locale` for setting...default locale (surprise, surprise)
    (@solnic)"
  - "`Config` exposes `predicates` setting too (@solnic)"
  fixed:
  - "`filled` macro behavior results in `must be filled` error messages when appropriate
    - see PR #141 for more information (issue #134) (@solnic)"
  - 'Filter rules no longer cause keys to be added to input (issue #142) (@solnic)'
  - Filter rules work now with inheritance (@solnic)
  - Inherited type schemas used by coercion are now properly configured as `lax` type
    (@solnic)
  - "`Config` is now finalized before instantiating schemas and properly dupped when
    its inherited (@flash-gordon + @solnic)"
  - "`Config#eql?` works as expected (@solnic)"
  - 'Predicates are properly inferred from array with a member type spec, ie `array[:integer]`
    results in `array? + each(:integer?)` (issue #140) (@solnic)'
- version: 1.0.3
  date: '2019-05-21'
  fixed:
  - "`Object#hash` is no longer used to calculate cache keys due to a potential risk
    of having hash collisions (@solnic)"
  - Predicate arguments are used again for template cache keys (@solnic)
  - "`I18n` messages backend no longer evaluates templates twice (@solnic)"
- version: 1.0.2
  date: '2019-05-12'
  fixed:
  - 'Caching message templates uses restricted set of known keys to calculate cache
    keys (issue #132) (@solnic)'
- version: 1.0.1
  date: '2019-05-08'
  fixed:
  - 'Applying `key?` predicate no longer causes recursive calls to `Result#errors`
    (issue #130) (@solnic)'
- version: 1.0.0
  date: '2019-05-03'
  changed:
  - "[BREAKING] `Result#to_hash` was removed (@solnic)"
  fixed:
  - Setting `:any` as the type spec no longer crashes (@solnic)
  - "`Result#error?` handles paths to array elements correctly (@solnic)"
- version: 0.6.0
  date: '2019-04-24'
  changed:
  - Dependency on `dry-types` was bumped to `~> 1.0` (@solnic)
  - Dependency on `dry-logic` was bumped to `~> 1.0` (@solnic)
  - Dependency on `dry-initializer` was bumped to `~> 3.0` (@solnic)
- version: 0.5.1
  date: '2019-04-17'
  fixed:
  - 'Key map no longer crashes on unexpected input (issue #118) (@solnic)'
- version: 0.5.0
  date: '2019-04-04'
  added:
  - |-
    Support for arbitrary meta-data in messages, ie:

      ```yaml
      en:
        dry_schema:
          errors:
            filled?:
              text: "cannot be blank"
              code: 123
      ```

      Now your error hash will include `{ foo: [{ text: 'cannot be blank', code: 123 }] }` (@solnic + @flash-gordon)
  - Support for type specs in `array` macro, ie `required(:tags).array(:integer)`
    (@solnic)
  - Support for type specs in `each` macro, ie `required(:tags).each(:integer)` (@solnic)
  - |-
    Shortcut for defining an array with hash as its member, ie:

      ```ruby
      Dry::Schema.Params do
        required(:tags).array(:hash) do
          required(:name).filled(:string)
        end
      end
      ```
  fixed:
  - Inferring predicates doesn't crash when `Any` type is used (@flash-gordon)
  - Inferring type specs when type is already set works correctly (@solnic)
  changed:
  - "[BREAKING] `:monads` extension wraps entire result objects in `Success` or `Failure`
    (@flash-gordon)"
  - When `:hints` are disabled, result AST will not include hint nodes (@solnic)
- version: 0.4.0
  date: '2019-03-26'
  added:
  - 'Schemas are now compatible with procs via `#to_proc` (issue #53) (@solnic)'
  - Support for configuring `top_namespace` for localized messages (@solnic)
  - Support for configuring more than one load path for localized messages (@solnic)
  - 'Support for inferring predicates from arbitrary types (issue #101) (@solnic)'
  fixed:
  - 'Handling of messages for `optional` keys without value rules works correctly
    (issue #87) (@solnic)'
  - 'Message structure for `optional` keys with an array of hashes no longer duplicates
    keys (issue #89) (@solnic)'
  - 'Inferring `:date_time?` predicate works correctly with `DateTime` types (issue
    #97) (@solnic)'
  changed:
  - "[BREAKING] Updated to work with `dry-types 0.15.0` (@flash-gordon)"
  - "[BREAKING] `Result#{errors,messages,hints}` returns `MessageSet` object now which
    is an enumerable coercible to a hash (@solnic)"
  - "[BREAKING] `Messages` backend classes no longer use global configuration (@solnic)"
  - "[BREAKING] Passing a non-symbol key name in the DSL will raise `ArgumentError`
    (issue #29) (@solnic)"
  - |-
    [BREAKING] Configuration for message backends is now nested under `messages` key with following settings:
      - `messages.backend` - previously `messages`
      - `messages.load_paths` - previously `messages_path`
      - `messages.namespace` - previously `namespace`
      - `messages.top_namespace` - **new setting** see above
  - "[BREAKING] `Messages::I18n` uses `I18.store_translations` instead of messing
    with `I18n.load_path` (@solnic)"
  - Schemas (`Params` and `JSON`) have nicer inspect (@solnic)
- version: 0.3.0
  date: '2018-03-04'
  fixed:
  - Configuration is properly inherited from a parent schema (@skryukov)
  - "`Result#error?` returns `true` when a preceding key has errors (@solnic)"
  - Predicate inferrer no longer chokes on sum, constructor and enum types (@solnic)
  - Predicate inferrer infers `:bool?` from boolean types (@solnic)
  - Block-based definitions using `array` works correctly (@solnic)
  - Using a disjunction with `array` and `hash` produces correct errors when element
    validation for array failed (@solnic)
  changed:
  - Required ruby version was removed from gemspec for people who are stuck on MRI
    2.3.x (@solnic)
- version: 0.2.0
  date: '2019-02-26'
  added:
  - New `hash` macro which prepends `hash?` type-check and allows nested schema definition
    (@solnic)
  - New `array` macro which works like `each` but prepends `array?` type-check (@solnic)
  fixed:
  - 'Rule name translation works correctly with I18n (issue #52) (@solnic)'
  - 'Rule name translation works correctly with namespaced messages (both I18n and
    plain YAML) (issue #57) (@solnic)'
  - 'Error messages under namespaces are correctly resolved for overridden names (issue
    #53) (@solnic)'
  - 'Namespaced error messages work correctly when schemas are reused within other
    schemas (issue #49) (@solnic)'
  - 'Child schema can override inherited rules now (issue #66) (@skryukov)'
  - 'Hints are correctly generated for disjunction that use type-check predicates
    (issue #24) (@solnic)'
  - 'Hints are correctly generated for nested schemas (issue #26) (@solnic)'
  - "`filled` macro respects inferred type-check predicates and puts them in front
    (@solnic)"
  - 'Value coercion works correctly with re-usable nested schemas (issue #25) (@solnic)'
  changed:
  - "[BREAKING] **Messages are now configured under `dry_schema` namespace by default**
    (issue #38) (@solnic)"
  - "[BREAKING] Hints are now an optional feature provided by `:hints` extension,
    to load it do `Dry::Schema.load_extensions(:hints)` (@solnic)"
  - "[BREAKING] Hints generation was improved in general, output of `Result#messages`
    and `Result#hints` changed in some cases (@solnic)"
  - "[BREAKING] `schema` macro no longer prepends `hash?` check, for this behavior
    use the new `hash` macro (see #31) (@solnic)"
  - "[BREAKING] Support for MRI < 2.4 was dropped (@solnic)"
- version: 0.1.1
  date: '2019-02-17'
  added:
  - "`Result#error?` supports checking nested errors too ie`result.error?('user.address')`
    (@solnic)"
  fixed:
  - 'Fix issues with templates and invalid tokens (issue #27) (@solnic)'
  - Fix Ruby warnings (@flash-gordon)
- version: 0.1.0
  date: '2019-01-30'
  summary: Initial release.
